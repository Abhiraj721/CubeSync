import React, { useEffect, useState } from "react";
import "./SolveStats.css";
import { faCopy, faDownload } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import copy from "copy-text-to-clipboard";
import { FormatTime } from "../Data/FormetTime";
import SolveAlert from "../SolveAlert/SolveAlert";
import handleAvgs from "../Data/HandleAvgsCriteria";
import Swal from "sweetalert2";
import withReactContent from "sweetalert2-react-content";
const MySwal = withReactContent(Swal);

export default function SolveStats({ solves, statsType }) {
  console.log(solves)
  const [isScrambleActive, setScrambleActive] = useState(true);
  const [isDateActive, setDateActive] = useState(false);
  const [isPuzzleTypeActive, setPuzzleTypeActive] = useState(false);
  const optionsArr = [
    { Name: "Scramble", isActive: isScrambleActive },
    { Name: "Date", isActive: isDateActive },
    { Name: "Puzzle Type", isActive: isPuzzleTypeActive },
  ];
  useEffect(() => {
    // Add any necessary logic inside useEffect
  }, []); // Empty dependency array to run the effect only once

  const handleCheckboxChange = (option) => {
    switch (option) {
      case "Scramble":
        setScrambleActive(!isScrambleActive);
        break;
      case "Date":
        setDateActive(!isDateActive);
        break;
      case "Puzzle Type":
        setPuzzleTypeActive(!isPuzzleTypeActive);
        break;
      default:
        break;
    }
  };

  const handleCopyText = () => {
    const formattedText = document.querySelector(".text-slider").innerText;
    copy(formattedText);
  };
  function downloadCurrStats(){
    const currentDate = new Date();
    const dateString = currentDate.toISOString().slice(0, 10); // Format: YYYY-MM-DD
    const timeString = currentDate.toTimeString().slice(0, 8).replace(/:/g, '-'); // Format: HH-MM-SS
    const fileName = `cubesync-${statsType}-${dateString}.txt`;
    const fileContent =document.querySelector(".text-slider").innerText;;
  
    // Create a Blob with the file content
    const blob = new Blob([fileContent], { type: 'text/plain' });
  
    // Create a link element
    const link = document.createElement('a');
  
    // Set the href attribute of the link to the Blob object
    link.href = URL.createObjectURL(blob);
  
    // Set the download attribute to specify the filename
    link.download = fileName;
  
    // Append the link to the document body
    document.body.appendChild(link);
  
    // Programmatically click the link to initiate the download
    link.click();
  
    // Remove the link from the document body
    document.body.removeChild(link);
  }
  function getAvgOfCurrStats() {

    if (statsType == "pb") {
      return solves[0].solveTime; ///uptade this code later ()
    }
   return handleAvgs(solves)
  }
  

  return (
    <div className="solveStatscontainer">
      <div className="ChooseStatsFleids">
        {optionsArr.map((option, index) => (
          <div key={index} className="statsOptions">
            <input
              className="statsOptionInput"
              checked={option.isActive}
              onChange={() => handleCheckboxChange(option.Name)}
              id={`checkbox-${index}`}
              type="checkbox"
            />
            <label className="statsOptionLabel" htmlFor={`checkbox-${index}`}>
              {option.Name}
            </label>
          </div>
        ))}
      </div>
      <div className="text-slider">
        <button style={{width:"1px",height:"6px"}} className="copySolveBtn" onClick={handleCopyText}>
          <FontAwesomeIcon icon={faCopy} />

        </button>
     <button style={{marginLeft:"4px",width:"1px",height:"6px"}} onClick={downloadCurrStats}>  <FontAwesomeIcon icon={faDownload} /></button>
        <div className="solveStatsWrap">
          <p className="statsHead">
            Generated by CubeSync <br />
            {statsType!= "pb" ? "avg of" : ""} {(statsType)}={getAvgOfCurrStats()}
          </p>
          <table className="statsTable">
            <thead>
              <tr>
                <th>Sno</th>
                {<th>Time</th>}
                {isScrambleActive && <th>Scramble</th>}
                {isDateActive && <th>Date</th>}
                {isPuzzleTypeActive && <th>Puzzle Type</th>}
              </tr>
            </thead>
            <tbody>
              {solves.map((solve, index) => (
                <tr key={index} className="statsSolve">
                  <td>{solves.length - index}</td>
                  {
                    <td className="statsSolveTime" onClick={()=>MySwal.fire(<SolveAlert solve={solve}/>)}>
                      {solve.isDNF
                        ? " DNF(" + solve.solveTime + ") "
                        : solve.solveTime}
                    </td>
                  }
                  {isScrambleActive && <td>{solve.scramble}</td>}
                  {isDateActive && <td>{solve.date}</td>}
                  {isPuzzleTypeActive && <td>{solve.puzzle}</td>}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
      <div>
     
      </div>
    </div>
  );
}
